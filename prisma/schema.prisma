// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.svg"
  theme    = "forest"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// User Management Models
enum UserRole {
  ADMIN
  TEACHER
  PARENT
  STUDENT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(PARENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // School relations
  teacherProfile TeacherProfile?
  parentProfile  ParentProfile?
  studentProfile StudentProfile?

  // Notifications and messages
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  notifications    Notification[]
  userSettings     UserSettings?

  @@map("users")
}

model TeacherProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  employeeId  String    @unique
  firstName   String
  lastName    String
  phone       String?
  address     String?
  dateOfBirth DateTime?
  hireDate    DateTime  @default(now())
  salary      Float?
  isActive    Boolean   @default(true)

  // Dashboard metrics
  totalStudents Int    @default(0) // Total de estudiantes asignados
  totalClasses  Int    @default(0) // Total de clases que enseña
  experience    Int? // Años de experiencia
  averageRating Float? // Calificación promedio (si hay evaluaciones)
  totalSubjects Int    @default(0) // Total de materias asignadas

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relación muchos-a-muchos con Subject (nuevo join table)
  teacherSubjects TeacherSubject[]
  classes      Class[]
  grades       Grade[]
  attendances  Attendance[]
  observations Observation[]
  assignments  Assignment[] // ✅ AGREGADO: Relación con tareas

  @@map("teacher_profiles")
}

model ParentProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String
  lastName    String
  phone       String
  address     String?
  dateOfBirth DateTime?
  occupation  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  children StudentProfile[]

  @@map("parent_profiles")
}

model StudentProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  studentId      String   @unique
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  gradeId        String // Relación con grado académico
  sectionId      String // Relación con sección
  parentId       String // Relación con parent
  enrollmentDate DateTime @default(now())
  isActive       Boolean  @default(true)

  // Dashboard metrics
  currentGPA     Float? // Promedio general actual
  attendanceRate Float? // Porcentaje de asistencia
  behaviorScore  Int     @default(100) // Puntaje de comportamiento
  totalCredits   Int     @default(0) // Créditos totales
  parentContact  String? // Teléfono principal del padre

  // ✅ AGREGADO: Campos adicionales importantes
  emergencyContact String? // Contacto de emergencia
  medicalNotes     String? // Notas médicas importantes
  allergies        String? // Alergias conocidas
  bloodType        String? // Tipo de sangre
  address          String? // Dirección del estudiante

  // ✅ AGREGADO: Estado académico
  academicStatus String    @default("REGULAR") // REGULAR, PROBATION, HONOR_ROLL
  graduationDate DateTime? // Fecha esperada de graduación
  specialNeeds   String? // Necesidades especiales

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  academicGrade   AcademicGrade @relation(fields: [gradeId], references: [id])
  academicSection Section       @relation(fields: [sectionId], references: [id])
  parent          ParentProfile @relation(fields: [parentId], references: [id])

  // Relations previously from Student model
  classes               ClassStudent[]
  grades                Grade[]
  attendances           Attendance[]
  observations          Observation[]
  assignmentSubmissions AssignmentSubmission[] // ✅ AGREGADO: Relación con entregas

  @@map("student_profiles")
}

// Academic Organization Models
model AcademicGrade {
  id          String   @id @default(cuid())
  name        String   @unique // "1ro", "2do", "3ro", etc.
  level       Int      @unique // 1, 2, 3, etc.
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  studentProfiles StudentProfile[]
  classes         Class[]
  sections        GradeSection[]

  @@map("academic_grades")
}

model Section {
  id          String   @id @default(cuid())
  name        String   @unique // "A", "B", "C", etc.
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  studentProfiles StudentProfile[]
  classes         Class[]
  gradeSections   GradeSection[]

  @@map("sections")
}

// Junction table for Grade-Section combinations
model GradeSection {
  id        String   @id @default(cuid())
  gradeId   String
  sectionId String
  isActive  Boolean  @default(true)
  capacity  Int      @default(25)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  grade   AcademicGrade @relation(fields: [gradeId], references: [id])
  section Section       @relation(fields: [sectionId], references: [id])

  @@unique([gradeId, sectionId])
  @@map("grade_sections")
}

// Academic Period Management
model AcademicPeriod {
  id           String   @id @default(cuid())
  name         String // "Q1 2025", "Trimestre 1", "Semestre 1"
  type         String // "QUARTER", "SEMESTER", "TRIMESTER", "BIMESTER"
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean  @default(false)
  isCurrent    Boolean  @default(false) // Solo un período puede ser current
  academicYear String // "2025", "2024-2025"
  order        Int // 1, 2, 3, 4 para ordenar períodos

  // ✅ AGREGADO: Campos adicionales importantes
  description       String? // Descripción del período
  gradesDueDate     DateTime? // Fecha límite para ingreso de calificaciones
  reportCardDate    DateTime? // Fecha de entrega de libretas
  parentMeetingDate DateTime? // Fecha de reunión de padres

  // ✅ AGREGADO: Configuración del período
  minPassingGrade Float   @default(11.0) // Nota mínima aprobatoria
  maxGrade        Float   @default(20.0) // Nota máxima
  allowLateGrades Boolean @default(false) // Permitir calificaciones tardías

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  grades      Grade[]
  attendances Attendance[]
  schedules   Schedule[] // ✅ AGREGADO: Relación con horarios

  @@unique([academicYear, type, order])
  @@map("academic_periods")
}

// Academic Models - Student functionality moved to StudentProfile

model Subject {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  credits     Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relación muchos-a-muchos con TeacherProfile a través de TeacherSubject
  teacherSubjects TeacherSubject[]
  classes   Class[]
  grades    Grade[]

  @@map("subjects")
}

// Join table para relación muchos-a-muchos Teacher <-> Subject
model TeacherSubject {
  id        String    @id @default(cuid())
  teacherId String
  subjectId String
  createdAt DateTime  @default(now())

  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId])
  @@map("teacher_subjects")
}

model Class {
  id           String   @id @default(cuid())
  name         String
  subjectId    String
  teacherId    String
  gradeId      String
  sectionId    String
  academicYear String
  maxStudents  Int      @default(30)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  subject     Subject  @relation(fields: [subjectId], references: [id])
  teacher     TeacherProfile @relation(fields: [teacherId], references: [id])
  grade       AcademicGrade @relation(fields: [gradeId], references: [id])
  section     Section  @relation(fields: [sectionId], references: [id])
  schedules   Schedule[]
  classStudents ClassStudent[]
  grades       Grade[]
  attendances  Attendance[]
  metrics      ClassMetrics[]
  assignments  Assignment[]

  @@map("classes")
}

model ClassStudent {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  createdAt DateTime @default(now())

  class   Class          @relation(fields: [classId], references: [id])
  student StudentProfile @relation(fields: [studentId], references: [id])

  @@unique([classId, studentId])
  @@map("class_students")
}

// Grading System
enum GradeType {
  EXAM
  QUIZ
  HOMEWORK
  PARTICIPATION
  PROJECT
  MIDTERM
  FINAL
}

model Grade {
  id               String    @id @default(cuid())
  studentId        String
  subjectId        String
  teacherId        String
  classId          String?
  academicPeriodId String // ✅ CORREGIDO: Hacer obligatorio
  gradeType        GradeType
  score            Float
  maxScore         Float     @default(100)
  percentage       Float? // ✅ Calculado automáticamente
  letterGrade      String? // ✅ Calculado automáticamente  
  comments         String?
  gradeDate        DateTime  @default(now())

  // Additional fields for better grading system
  term          String  @default("Q1") // ✅ CORREGIDO: Valor por defecto
  weight        Float   @default(1.0) // Peso de la calificación
  isExtraCredit Boolean @default(false) // Crédito extra
  rubricId      String? // ID de rúbrica (para futuro)

  // ✅ AGREGADO: Validaciones de negocio
  isValid    Boolean   @default(true) // Para marcar calificaciones válidas
  reviewedBy String? // ID del revisor (opcional)
  reviewDate DateTime? // Fecha de revisión

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student        StudentProfile  @relation(fields: [studentId], references: [id])
  subject        Subject         @relation(fields: [subjectId], references: [id])
  teacher        TeacherProfile  @relation(fields: [teacherId], references: [id])
  class          Class?          @relation(fields: [classId], references: [id])
  academicPeriod AcademicPeriod? @relation(fields: [academicPeriodId], references: [id])

  @@map("grades")
}

// Attendance System
enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

model Attendance {
  id               String           @id @default(cuid())
  studentId        String
  classId          String
  teacherId        String
  academicPeriodId String? // Relación con período académico
  date             DateTime
  status           AttendanceStatus
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  student        StudentProfile  @relation(fields: [studentId], references: [id])
  class          Class           @relation(fields: [classId], references: [id])
  teacher        TeacherProfile  @relation(fields: [teacherId], references: [id])
  academicPeriod AcademicPeriod? @relation(fields: [academicPeriodId], references: [id])

  @@unique([studentId, classId, date])
  @@map("attendances")
}

// Observation System
model Observation {
  id          String   @id @default(cuid())
  studentId   String
  teacherId   String
  title       String
  description String
  category    String
  isPositive  Boolean  @default(true)
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  student StudentProfile @relation(fields: [studentId], references: [id])
  teacher TeacherProfile @relation(fields: [teacherId], references: [id])

  @@map("observations")
}

// Communication System
enum MessageType {
  GENERAL
  GRADE_NOTIFICATION
  ATTENDANCE_ALERT
  BEHAVIOR_REPORT
  ANNOUNCEMENT
  MEETING_REQUEST
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Message {
  id          String      @id @default(cuid())
  senderId    String
  receiverId  String?     // Opcional para mensajes broadcast
  subject     String
  content     String
  type        MessageType @default(GENERAL)
  isRead      Boolean     @default(false)
  isBroadcast Boolean     @default(false) // Para comunicaciones masivas
  targetRole  UserRole?   // Rol destinatario para broadcast (opcional)
  priority    Priority    @default(MEDIUM)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Threading fields for conversations
  threadId    String?     // ID del hilo de conversación
  replyToId   String?     // ID del mensaje al que responde
  
  sender      User        @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User?       @relation("ReceivedMessages", fields: [receiverId], references: [id])
  replyTo     Message?    @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     Message[]   @relation("MessageReplies")

  @@map("messages")
}

// Notification System
enum NotificationType {
  GRADE_POSTED
  ATTENDANCE_ALERT
  ASSIGNMENT_DUE
  MEETING_SCHEDULED
  ANNOUNCEMENT
  BEHAVIOR_REPORT
  PAYMENT_DUE
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// School Settings
model SchoolSettings {
  id                       String   @id @default(cuid())
  schoolName               String
  schoolAddress            String
  schoolPhone              String
  schoolEmail              String
  schoolWebsite            String
  logoUrl                  String?
  primaryColor             String   @default("#3B82F6")
  secondaryColor           String   @default("#10B981")
  academicYearStart        String
  academicYearEnd          String
  gradeSystem              String   @default("numeric")
  maxGrade                 Int      @default(100)
  passingGrade             Int      @default(60)
  attendanceRequired       Int      @default(80)
  timezone                 String   @default("America/Mexico_City")
  language                 String   @default("es")
  enableNotifications      Boolean  @default(true)
  enableEmailNotifications Boolean  @default(true)
  enableSMSNotifications   Boolean  @default(false)
  enableParentPortal       Boolean  @default(true)
  enableStudentPortal      Boolean  @default(true)
  enableOnlineGrades       Boolean  @default(true)
  enableAttendanceTracking Boolean  @default(true)
  enableMessaging          Boolean  @default(true)
  autoBackup               Boolean  @default(false)
  backupFrequency          String   @default("weekly")
  dataRetentionDays        Int      @default(365)
  maintenanceMode          Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@map("school_settings")
}

// User Settings
model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  theme              String   @default("light")
  language           String   @default("es")
  timezone           String   @default("America/Mexico_City")
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  digestFrequency    String   @default("weekly")
  showFullName       Boolean  @default(true)
  showEmail          Boolean  @default(false)
  showPhone          Boolean  @default(false)
  twoFactorEnabled   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// System Metrics for Dashboard
model SystemMetrics {
  id                String   @id @default(cuid())
  totalUsers        Int      @default(0)
  totalStudents     Int      @default(0)
  totalTeachers     Int      @default(0)
  totalParents      Int      @default(0)
  totalClasses      Int      @default(0)
  activeClasses     Int      @default(0)
  averageAttendance Float? // Porcentaje promedio de asistencia
  averageGrade      Float? // Promedio general de calificaciones
  systemUptime      Float? // Tiempo de actividad del sistema
  lastCalculated    DateTime @default(now())
  academicYear      String // Año académico de estas métricas
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("system_metrics")
}

// Class Metrics for detailed reporting
model ClassMetrics {
  id                String   @id @default(cuid())
  classId           String   @unique
  averageGrade      Float? // Promedio de calificaciones de la clase
  attendanceRate    Float? // Porcentaje de asistencia promedio
  totalStudents     Int      @default(0)
  activeStudents    Int      @default(0)
  gradeDistribution Json? // Distribución de calificaciones
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  class Class @relation(fields: [classId], references: [id])

  @@map("class_metrics")
}

// ✅ AGREGADO: Tabla de Horarios/Cronogramas (IMPORTANTE para colegios)
model Schedule {
  id              String   @id @default(cuid())
  classId         String
  academicPeriodId String
  dayOfWeek       String   // Ejemplo: "Monday", "Tuesday"
  startTime       DateTime // Hora de inicio
  endTime         DateTime // Hora de fin
  room            String?  // Aula o sala donde se imparte la clase
  notes           String?  // Notas adicionales sobre el horario
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  class           Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  academicPeriod  AcademicPeriod @relation(fields: [academicPeriodId], references: [id])

  @@map("schedules")
}

// ✅ AGREGADO: Tabla de Tareas/Asignaciones (CRÍTICO para gestión académica)
model Assignment {
  id          String   @id @default(cuid())
  classId     String
  teacherId   String
  title       String
  description String?
  dueDate     DateTime
  maxScore    Float    @default(100)
  weight      Float    @default(1.0)
  type        String   @default("HOMEWORK") // HOMEWORK, PROJECT, EXAM, QUIZ
  isActive    Boolean  @default(true)

  // Configuración
  allowLateSubmission Boolean @default(false)
  latePenalty         Float? // Penalización por entrega tardía

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class       Class                  @relation(fields: [classId], references: [id])
  teacher     TeacherProfile         @relation(fields: [teacherId], references: [id])
  submissions AssignmentSubmission[]

  @@map("assignments")
}

// ✅ AGREGADO: Tabla de Entregas de Tareas
model AssignmentSubmission {
  id           String    @id @default(cuid())
  assignmentId String
  studentId    String
  submittedAt  DateTime?
  score        Float?
  feedback     String?
  isLate       Boolean   @default(false)
  status       String    @default("PENDING") // PENDING, SUBMITTED, GRADED

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignment Assignment     @relation(fields: [assignmentId], references: [id])
  student    StudentProfile @relation(fields: [studentId], references: [id])

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}
